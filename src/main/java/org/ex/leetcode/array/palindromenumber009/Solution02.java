package org.ex.leetcode.array.palindromenumber009;

/**
 * @desc:
 *
 * 思路二，算数取余
 *
 * @author: Leif
 * @date: 2024/1/17 09:18
 */
public class Solution02 {
    public boolean isPalindDrome(int x){
        /**
         * 先确定2个特殊条件
         * 1.负数没有回文
         * 2.如果数字的最后一位是 0，为了使该数字为回文，则其第一位数字也应该是 0
         */
        if (x < 0 &&  (x % 10 == 0 && x != 0) ) return false;

        int reverseNumber = 0;
        /**
         * 现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？
         * 由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，
         * 所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了
         */
        while ( x > reverseNumber){
            /**
             * 对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，
             * 要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，
             * 1221 / 10 = 122，再求出上一步结果除以10的余数，122 % 10 = 2，
             * 就可以得到倒数第二位数字。如果我们把最后一位数字乘以10，
             * 再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。
             * 如果继续这个过程，我们将得到更多位数的反转数字。
             */
            reverseNumber =  reverseNumber * 10 + x % 10;
            x /= 10;

        }

        /**
         * 当数字长度为奇数时，我们可以通过 reverseNumber/10 去除处于中位的数字。
         * 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，reverseNumber = 123，
         * 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
         */
        return x == reverseNumber || x == reverseNumber / 10;
    }


}
